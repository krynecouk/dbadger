swagger: "2.0"
info:
  title: DBadger API
  description: Documentation of DBadger REST API.
  version: 1.0.0
host: localhost:8080
basePath: /connections
schemes:
  - http
paths:
  /:
    get:
      summary: "Returns an array of DB connections."
      tags:
        - Connection
      produces:
        - application/json
      responses:
        "200":
          description: "An array of DB connections."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Connection"
    post:
      summary: "Creates a new DB connection."
      tags:
        - Connection
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "DB Connection to be created."
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Connection"
            required:
              - hostname
              - databaseName
              - port
              - username
      responses:
        '200':
          description: "Created."
        '400':
          description: "Bad request."
        '409':
          description: "Connection with provided id already exists."
    put:
      summary: "Updates a DB connection."
      tags:
        - Connection
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "body"
          description: "DB Connection to be created."
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Connection"
            required:
              - id
              - hostname
              - databaseName
              - port
              - username
      responses:
        '200':
          description: "Updated."
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
  /{id}:
    get:
      summary: "Returns a DB connection."
      tags:
        - Connection
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection."
          required: true
          type: "string"
      responses:
        "200":
          description: "A DB connection"
          schema:
            $ref: "#/definitions/Connection"
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
    delete:
      summary: "Deletes a DB connection."
      tags:
        - Connection
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection that needs to be deleted."
          required: true
          type: "string"
      responses:
        '200':
          description: "Deleted."
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
  /{id}/metadata/schemas:
    get:
      summary: "Returns an array of DB schemas."
      tags:
        - Metadata
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection."
          required: true
          type: "string"
      responses:
        "200":
          description: "An array of DB schemas."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Schema"
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
  /{id}/metadata/tables:
    get:
      summary: "Returns an array of DB tables."
      tags:
        - Metadata
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection."
          required: true
          type: "string"
      responses:
        "200":
          description: "An array of DB tables."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
  /{id}/metadata/tables/{name}/columns:
    get:
      summary: "Returns an array of DB table columns."
      tags:
        - Metadata
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection."
          required: true
          type: "string"
        - name: "name"
          in: "path"
          description: "The name of DB table."
          required: true
          type: "string"
      responses:
        "200":
          description: "An array of table columns."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Column"
        '400':
          description: "Bad request."
        '404':
          description: "Connection or table name was not found."
  /{id}/data/tables/{name}:
    get:
      summary: "Returns data from table."
      tags:
        - Data
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of DB connection."
          required: true
          type: "string"
        - name: "name"
          in: "path"
          description: "The name of DB table."
          required: true
          type: "string"
        - name: "limit"
          in: "query"
          description: "Max number of results to be returned. Default is 10."
          required: false
          type: "integer"
      responses:
        "200":
          description: "An array of data."
          schema:
            type: object
        '400':
          description: "Bad request."
        '404':
          description: "Connection was not found."
definitions:
  Connection:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12
      name:
        type: "string"
        example: "library"
      hostname:
        type: "string"
        example: "localhost"
      port:
        type: "integer"
        format: "int32"
        example: 5432
      databaseName:
        type: "string"
        example: "db_library"
      username:
        type: "string"
        example: "library_admin"
      password:
        type: "string"
        example: "library_admin"
  Schema:
    type: "object"
    properties:
      name:
        type: "string"
        example: "public"
      owner:
        type: "string"
        example: "dbr_admin"
  Table:
    type: "object"
    properties:
      name:
        type: "string"
        example: "books"
      owner:
        type: "string"
        example: "dbr_admin"
  Column:
    type: "object"
    properties:
      name:
        type: "string"
        example: "id"
      position:
        type: "integer"
        format: "int32"
        example: "2"
      nullable:
        type: "boolean"
        example: false
